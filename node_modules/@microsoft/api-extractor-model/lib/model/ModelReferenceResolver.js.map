{"version":3,"file":"ModelReferenceResolver.js","sourceRoot":"","sources":["../../src/model/ModelReferenceResolver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DocDeclarationReference, SelectorKind } from '@microsoft/tsdoc';\r\nimport { ApiItem } from '../items/ApiItem';\r\nimport { ApiModel } from './ApiModel';\r\nimport { ApiPackage } from './ApiPackage';\r\nimport { ApiEntryPoint } from './ApiEntryPoint';\r\nimport { ApiItemContainerMixin } from '../mixins/ApiItemContainerMixin';\r\nimport { ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\n\r\n/**\r\n * Result object for {@link ApiModel.resolveDeclarationReference}.\r\n *\r\n * @public\r\n */\r\nexport interface IResolveDeclarationReferenceResult {\r\n  /**\r\n   * The referenced ApiItem, if the declaration reference could be resolved.\r\n   */\r\n  resolvedApiItem: ApiItem | undefined;\r\n\r\n  /**\r\n   * If resolvedApiItem is undefined, then this will always contain an error message explaining why the\r\n   * resolution failed.\r\n   */\r\n  errorMessage: string | undefined;\r\n}\r\n\r\n/**\r\n * This resolves a TSDoc declaration reference by walking the `ApiModel` hierarchy.\r\n *\r\n * @remarks\r\n *\r\n * This class is analogous to `AstReferenceResolver` from the `@microsoft/api-extractor` project,\r\n * which resolves declaration references by walking the compiler state.\r\n */\r\nexport class ModelReferenceResolver {\r\n  private readonly _apiModel: ApiModel;\r\n\r\n  public constructor(apiModel: ApiModel) {\r\n    this._apiModel = apiModel;\r\n  }\r\n\r\n  public resolve(\r\n    declarationReference: DocDeclarationReference,\r\n    contextApiItem: ApiItem | undefined\r\n  ): IResolveDeclarationReferenceResult {\r\n    const result: IResolveDeclarationReferenceResult = {\r\n      resolvedApiItem: undefined,\r\n      errorMessage: undefined\r\n    };\r\n\r\n    let apiPackage: ApiPackage | undefined = undefined;\r\n\r\n    // Is this an absolute reference?\r\n    if (declarationReference.packageName !== undefined) {\r\n      apiPackage = this._apiModel.tryGetPackageByName(declarationReference.packageName);\r\n      if (apiPackage === undefined) {\r\n        result.errorMessage = `The package \"${declarationReference.packageName}\" could not be located`;\r\n        return result;\r\n      }\r\n    } else {\r\n      // If the package name is omitted, try to infer it from the context\r\n      if (contextApiItem !== undefined) {\r\n        apiPackage = contextApiItem.getAssociatedPackage();\r\n      }\r\n\r\n      if (apiPackage === undefined) {\r\n        result.errorMessage =\r\n          `The reference does not include a package name, and the package could not be inferred` +\r\n          ` from the context`;\r\n        return result;\r\n      }\r\n    }\r\n\r\n    const importPath: string = declarationReference.importPath || '';\r\n\r\n    const foundEntryPoints: ReadonlyArray<ApiEntryPoint> = apiPackage.findEntryPointsByPath(importPath);\r\n    if (foundEntryPoints.length !== 1) {\r\n      result.errorMessage = `The import path \"${importPath}\" could not be resolved`;\r\n      return result;\r\n    }\r\n\r\n    let currentItem: ApiItem = foundEntryPoints[0];\r\n\r\n    // Now search for the member reference\r\n    for (const memberReference of declarationReference.memberReferences) {\r\n      if (memberReference.memberSymbol !== undefined) {\r\n        result.errorMessage = `Symbols are not yet supported in declaration references`;\r\n        return result;\r\n      }\r\n\r\n      if (memberReference.memberIdentifier === undefined) {\r\n        result.errorMessage = `Missing member identifier`;\r\n        return result;\r\n      }\r\n\r\n      const identifier: string = memberReference.memberIdentifier.identifier;\r\n\r\n      if (!ApiItemContainerMixin.isBaseClassOf(currentItem)) {\r\n        // For example, {@link MyClass.myMethod.X} is invalid because methods cannot contain members\r\n        result.errorMessage =\r\n          `Unable to resolve ${JSON.stringify(identifier)} because ${JSON.stringify(currentItem)}` +\r\n          ` cannot act as a container`;\r\n        return result;\r\n      }\r\n\r\n      const foundMembers: ReadonlyArray<ApiItem> = currentItem.findMembersByName(identifier);\r\n      if (foundMembers.length === 0) {\r\n        result.errorMessage = `The member reference ${JSON.stringify(identifier)} was not found`;\r\n        return result;\r\n      }\r\n      if (foundMembers.length > 1) {\r\n        if (memberReference.selector && memberReference.selector.selectorKind === SelectorKind.Index) {\r\n          const selectedMembers: ApiItem[] = [];\r\n\r\n          const selectorOverloadIndex: number = parseInt(memberReference.selector.selector);\r\n          for (const foundMember of foundMembers) {\r\n            if (ApiParameterListMixin.isBaseClassOf(foundMember)) {\r\n              if (foundMember.overloadIndex === selectorOverloadIndex) {\r\n                selectedMembers.push(foundMember);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (selectedMembers.length === 0) {\r\n            result.errorMessage =\r\n              `An overload for ${JSON.stringify(identifier)} was not found that matches` +\r\n              ` the TSDoc selector \":${selectorOverloadIndex}\"`;\r\n            return result;\r\n          }\r\n\r\n          if (selectedMembers.length === 1) {\r\n            result.resolvedApiItem = selectedMembers[0];\r\n            return result;\r\n          }\r\n        }\r\n\r\n        // TODO: Support other TSDoc selectors\r\n        result.errorMessage = `The member reference ${JSON.stringify(identifier)} was ambiguous`;\r\n        return result;\r\n      }\r\n\r\n      currentItem = foundMembers[0];\r\n    }\r\n    result.resolvedApiItem = currentItem;\r\n    return result;\r\n  }\r\n}\r\n"]}