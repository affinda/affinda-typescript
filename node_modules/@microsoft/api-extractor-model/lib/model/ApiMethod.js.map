{"version":3,"file":"ApiMethod.js","sourceRoot":"","sources":["../../src/model/ApiMethod.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yFAKwD;AAExD,6DAAkF;AAClF,8DAAoF;AACpF,2EAAuG;AACvG,qEAA8F;AAC9F,qEAA8F;AAC9F,yDAA4E;AAC5E,mFAG6C;AAe7C;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAa,SAAU,SAAQ,2BAAY,CACzC,qDAAyB,CACvB,6CAAqB,CAAC,uCAAkB,CAAC,uCAAkB,CAAC,+BAAc,CAAC,iCAAe,CAAC,CAAC,CAAC,CAAC,CAC/F,CACF;IACC,YAAmB,OAA0B;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,IAAY,EAAE,QAAiB,EAAE,aAAqB;QAClF,IAAI,QAAQ,EAAE;YACZ,OAAO,GAAG,IAAI,IAAI,qBAAkB,WAAW,aAAa,EAAE,CAAC;SAChE;aAAM;YACL,OAAO,GAAG,IAAI,IAAI,qBAAkB,aAAa,aAAa,EAAE,CAAC;SAClE;IACH,CAAC;IAED,gBAAgB;IAChB,IAAW,IAAI;QACb,6BAA0B;IAC5B,CAAC;IAED,gBAAgB;IAChB,IAAW,YAAY;QACrB,OAAO,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACjF,CAAC;IAED,sBAAsB;IACf,uBAAuB;QAC5B,MAAM,aAAa,GAAc,2CAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,2CAAoB,CAAC,KAAK,EAAE,CAAC;aACjF,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAoB,CAAC,kBAAmB,EAAE,aAAa,CAAC;aACzF,WAAW,uBAAgB;aAC3B,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;CACF;AAnCD,8BAmCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  DeclarationReference,\r\n  Meaning,\r\n  Navigation,\r\n  Component\r\n} from '@microsoft/tsdoc/lib/beta/DeclarationReference';\r\nimport { ApiItemKind } from '../items/ApiItem';\r\nimport { ApiStaticMixin, IApiStaticMixinOptions } from '../mixins/ApiStaticMixin';\r\nimport { IApiDeclaredItemOptions, ApiDeclaredItem } from '../items/ApiDeclaredItem';\r\nimport { IApiParameterListMixinOptions, ApiParameterListMixin } from '../mixins/ApiParameterListMixin';\r\nimport { IApiReleaseTagMixinOptions, ApiReleaseTagMixin } from '../mixins/ApiReleaseTagMixin';\r\nimport { ApiReturnTypeMixin, IApiReturnTypeMixinOptions } from '../mixins/ApiReturnTypeMixin';\r\nimport { IApiNameMixinOptions, ApiNameMixin } from '../mixins/ApiNameMixin';\r\nimport {\r\n  ApiTypeParameterListMixin,\r\n  IApiTypeParameterListMixinOptions\r\n} from '../mixins/ApiTypeParameterListMixin';\r\n\r\n/**\r\n * Constructor options for {@link ApiMethod}.\r\n * @public\r\n */\r\nexport interface IApiMethodOptions\r\n  extends IApiNameMixinOptions,\r\n    IApiTypeParameterListMixinOptions,\r\n    IApiParameterListMixinOptions,\r\n    IApiReleaseTagMixinOptions,\r\n    IApiReturnTypeMixinOptions,\r\n    IApiStaticMixinOptions,\r\n    IApiDeclaredItemOptions {}\r\n\r\n/**\r\n * Represents a TypeScript member function declaration that belongs to an `ApiClass`.\r\n *\r\n * @remarks\r\n *\r\n * This is part of the {@link ApiModel} hierarchy of classes, which are serializable representations of\r\n * API declarations.\r\n *\r\n * `ApiMethod` represents a TypeScript declaration such as the `render` member function in this example:\r\n *\r\n * ```ts\r\n * export class Widget {\r\n *   public render(): void { }\r\n * }\r\n * ```\r\n *\r\n * Compare with {@link ApiMethodSignature}, which represents a method belonging to an interface.\r\n * For example, a class method can be `static` but an interface method cannot.\r\n *\r\n * @public\r\n */\r\nexport class ApiMethod extends ApiNameMixin(\r\n  ApiTypeParameterListMixin(\r\n    ApiParameterListMixin(ApiReleaseTagMixin(ApiReturnTypeMixin(ApiStaticMixin(ApiDeclaredItem))))\r\n  )\r\n) {\r\n  public constructor(options: IApiMethodOptions) {\r\n    super(options);\r\n  }\r\n\r\n  public static getContainerKey(name: string, isStatic: boolean, overloadIndex: number): string {\r\n    if (isStatic) {\r\n      return `${name}|${ApiItemKind.Method}|static|${overloadIndex}`;\r\n    } else {\r\n      return `${name}|${ApiItemKind.Method}|instance|${overloadIndex}`;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): ApiItemKind {\r\n    return ApiItemKind.Method;\r\n  }\r\n\r\n  /** @override */\r\n  public get containerKey(): string {\r\n    return ApiMethod.getContainerKey(this.name, this.isStatic, this.overloadIndex);\r\n  }\r\n\r\n  /** @beta @override */\r\n  public buildCanonicalReference(): DeclarationReference {\r\n    const nameComponent: Component = DeclarationReference.parseComponent(this.name);\r\n    return (this.parent ? this.parent.canonicalReference : DeclarationReference.empty())\r\n      .addNavigationStep(this.isStatic ? Navigation.Exports : Navigation.Members, nameComponent)\r\n      .withMeaning(Meaning.Member)\r\n      .withOverloadIndex(this.overloadIndex);\r\n  }\r\n}\r\n"]}