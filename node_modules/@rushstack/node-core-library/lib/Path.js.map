{"version":3,"file":"Path.js","sourceRoot":"","sources":["../src/Path.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAE7B;;;;;GAKG;AACH,MAAa,IAAI;IAGf;;;;;;;;;OASG;IACI,MAAM,CAAC,OAAO,CAAC,SAAiB,EAAE,gBAAwB;QAC/D,6EAA6E;QAC7E,uEAAuE;QACvE,sFAAsF;QACtF,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,cAAc,CAAC,SAAiB,EAAE,gBAAwB;QACtE,MAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;QACxE,OAAO,YAAY,KAAK,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC3E,CAAC;;AAhCc,uBAAkB,GAAW,YAAY,CAAC;AAD3D,oBAkCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\n/**\r\n * Common operations for manipulating file and directory paths.\r\n * @remarks\r\n * This API is intended to eventually be a complete replacement for the NodeJS \"path\" API.\r\n * @public\r\n */\r\nexport class Path {\r\n  private static _relativePathRegex: RegExp = /^[.\\/\\\\]+$/;\r\n\r\n  /**\r\n   * Returns true if \"childPath\" is located inside the \"parentFolderPath\" folder\r\n   * or one of its child folders.  Note that \"parentFolderPath\" is not considered to be\r\n   * under itself.  The \"childPath\" can refer to any type of file system object.\r\n   *\r\n   * @remarks\r\n   * The indicated file/folder objects are not required to actually exist on disk.\r\n   * For example, \"parentFolderPath\" is interpreted as a folder name even if it refers to a file.\r\n   * If the paths are relative, they will first be resolved using path.resolve().\r\n   */\r\n  public static isUnder(childPath: string, parentFolderPath: string): boolean {\r\n    // If childPath is under parentPath, then relativePath will be something like\r\n    // \"../..\" or \"..\\\\..\", which consists entirely of periods and slashes.\r\n    // (Note that something like \"....t\" is actually a valid filename, but \"....\" is not.)\r\n    const relativePath: string = path.relative(childPath, parentFolderPath);\r\n    return Path._relativePathRegex.test(relativePath);\r\n  }\r\n\r\n  /**\r\n   * Returns true if \"childPath\" is equal to \"parentFolderPath\", or if it is inside that folder\r\n   * or one of its children.  The \"childPath\" can refer to any type of file system object.\r\n   *\r\n   * @remarks\r\n   * The indicated file/folder objects are not required to actually exist on disk.\r\n   * For example, \"parentFolderPath\" is interpreted as a folder name even if it refers to a file.\r\n   * If the paths are relative, they will first be resolved using path.resolve().\r\n   */\r\n  public static isUnderOrEqual(childPath: string, parentFolderPath: string): boolean {\r\n    const relativePath: string = path.relative(childPath, parentFolderPath);\r\n    return relativePath === '' || Path._relativePathRegex.test(relativePath);\r\n  }\r\n}\r\n"]}